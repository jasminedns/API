> Assignment description: 

    - The page needs to have at least one event that triggers the initial API call. This could be a 'start' button, or a 'search' field with a submit button or 
    something similar. On firing the event an AJAX request is made to an API and data is returned. The data must be a JSON object and not a simple string.
    -The data that is returned from the call must be dynamically displayed on the page. You can populate pre-existing elements or dynamically create elements.
    -Submit both a github pages link and a link to the repo.

> G Requirements:

    -Connect to an API in a user fired event
    -Make a request for data
    -Handle the returned data in an efficient manner
    -Display more than one property of the returned data on the page
    -The page must be responsive

> VG Requirements:

    -Have correct error handling when fetching the data
    -Append arguments to the request
    -Multiple calls to the API - eg have a input field that will generate different arguments and a button that fires the request
    -Semantic code
    -A consistent code style

> Plan: 
    -Build a videogame database
        -Chosen website: https://rawg.io/apidocs
        -Info: https://api.rawg.io/docs/
        -Link to API Key: https://rawg.io/@jasmine_dns/apikey
        -Database: https://api.rawg.io/api/games?key=f64cb459141649f18772e0841a1ca355

    -Aspect
        -Modelled after Steam page
        -Try to make a searchbar where the user can look for a game. 
        -Try to make a filter so that the user can search by genre, platform or rating
        -Try to make the opening page with buttons to show top 5 rated games and one for the newest releases.